name: CI/CD using github actions & docker

on:
  push:
    branches: [ "dev" ]

permissions:
  contents: read

jobs:
  CI-CD:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      # - name: Gradle Caching
      #   uses: actions/cache@v3
      #   with:
      #     path: |
      #       ~/.gradle/caches
      #       ~/.gradle/wrapper
      #     key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
      #     restore-keys: |
      #       ${{ runner.os }}-gradle-

      - name: make application.properties
        if: |
          contains(github.ref, 'dev') 
        run: |
          cd ./src/main/resources
          touch ./application.properties
          echo "${{ secrets.PROPERTIES }}" > ./application.properties
        shell: bash

      - name: Setup Gradle Wrapper
        run: gradle wrapper --gradle-version 8.5
        shell: bash 
        
      - name: Grant execute permission for gradlew
        run: chmod +x ./gradlew
        shell: bash
      
      - name: Build with Gradle
        run: ./gradlew build -x test

      - name: Docker build & push to dev
        if: contains(github.ref, 'dev')

        run: |
          docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}
          docker build -t ${{ secrets.DOCKER_USERNAME }}/mytaek1_service .
          docker push ${{ secrets.DOCKER_USERNAME }}/mytaek1_service

      - name: Deploy to dev
        uses: appleboy/ssh-action@master
        id: deploy-dev

        if: contains(github.ref, 'dev')
        with:
          host: ${{ secrets.HOST_DEV }} # EC2 퍼블릭 IPv4 DNS
          username: ${{ secrets.USERNAME }} # ubuntu
          port: 22
          key: ${{ secrets.PRIVATE_KEY }}
          envs: GITHUB_SHA
          script: |
            sudo docker ps
            sudo docker stop $(docker ps -a -q)
            sudo docker rm $(docker ps -a -q)
            sudo docker pull ${{ secrets.DOCKER_USERNAME }}/mytaek1_service
            sudo docker run -d -p 8080:8080 -e TZ=Asia/Seoul ${{ secrets.DOCKER_USERNAME }}/mytaek1_service
            sudo docker image prune -f

  # docker-pull-and-run:
  #  runs-on: [self-hosted, dev]
  #  if: ${{ needs.CI-CD.result == 'success' }}
  #  needs: [ CI-CD ]
  #  steps:
  #    - name : 배포 스크립트 실행
  #      run: |
  #        sh /deploy.sh
  #        sudo docker image prune -f
